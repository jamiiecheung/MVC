@model WebApplication2.Models.Strategy

@{
    ViewBag.Title = "Edit";
}



<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.3/jquery.min.js"></script>
<script src="http://code.jquery.com/ui/1.11.1/jquery-ui.min.js"></script>
<script src="http://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.3.0/js/bootstrap-datepicker.js"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.11.4/jquery-ui.css" rel="stylesheet">

<style>
    .nomargin {
        margin: 0 !important;
        margin-left: 0 !important;
        margin-right: 0 !important;
    }

    .nopadding {
        padding: 0 !important;
    }

    .noleftpadding {
        padding-left: 0 !important;
    }

    .norightpadding {
        padding-right: 0 !important;
    }

    .formwhole {
        margin: 0 !important
    }

    .right {
        text-align: right;
    }

    .formheight {
        height: 35px;
    }

    .labelpadding {
        padding-left: 25px;
        padding-right: 5px;
    }

    .paddingtr {
        padding-top: 5px;
        padding-bottom: 5px;
    }

    textarea {
        width: 1000px;
        height: 200px;
    }

    .fontsemilabel {
        font-size: 10px;
        text-align: right;
    }
</style>



<script>
    $(document).ready(function () {

        $('#txt_datepicker').datetimepicker({
            format: 'MM/DD/YY'
        });
    });


    //$('#mcomments').keyUp(function () {
    //    var len = val.value.length;
    //    var remChars = 1000 - len;

    //    $('#charcount').text(remChars);
    //});


    $(function () {
        $('#mcomments').keyup(function (e) {
            var max = 1000;
            var len = $(this).val().length;
            var char = max - len;
            $('#text-counter').html(char);
        });
    });



</script>




<script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script>
    $(function () {
        $("#questionInput").keyup(function () {
            var charsLeft = $(this).attr("maxlength") - $(this).val().length;
            $("#charsLeft").text(charsLeft + " characters left");
        });
    });
</script>


@*<script language="javascript" type="text/javascript">
        function getCountDown() {
            //Get the Textbox control
            var textField = document.getElementById("<%#TextBox1.ClientID %>");
            //Do the math of chars left and pass the value to the label
            document.getElementById('<%#Label1.ClientID %>').innerHTML = textField.maxLength - textField.value.length;
            return false;
        }
    </script>*@


<br />
@using (Html.BeginForm())
{
    <table>
        <tr>
            <td class="col-md-2"><h4><span>Strategy-Edit</span></h4></td>
            <td class="col-md-1 right"><h5><input type="submit" value="Save" class="btn btn-default" onclick="location.href='@Url.Action("Edit", "Strategy")'" /></h5></td>
            <td>
                <div class="form-group">
                    @Html.LabelFor(model => model.OSR, htmlAttributes: new { @class = "control-label col-md-5 right" })
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.OSR, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.OSR, "", new { @class = "text-danger" })
                    </div>
                </div>
            </td>
            <td>
                <div class="form-group">
                    @Html.LabelFor(model => model.CreateDate, htmlAttributes: new { @class = "control-label col-md-5 right" })
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.CreateDate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CreateDate, "", new { @class = "text-danger" })
                    </div>
                </div>
            </td>
            <td>
                <div class="form-group">
                    @Html.LabelFor(model => model.Updated, htmlAttributes: new { @class = "control-label col-md-5 right" })
                    <div class="col-md-5">
                        @Html.EditorFor(model => model.Updated, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Updated, "", new { @class = "text-danger" })
                    </div>
                </div>
            </td>
            <td>
                <a href="mailto:@{@ViewBag.EmailTo}?subject=@{@ViewBag.Subject}&body=@{@ViewBag.Body}"><button class="btn btn-default" type="button">Email</button></a>
            </td>
        </tr>
    </table>

    @Html.AntiForgeryToken()

    <div class="form-horizontal formwhole">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.StrategyId)
        <div class="form-group">
            <hr />
        </div>
        @*<div class="form-group">
            @Html.LabelFor(model => model.Customer, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.Customer, new { htmlAttributes = new { @class = "form-control nomargin" } })
                @Html.ValidationMessageFor(model => model.Customer, "", new { @class = "text-danger" })
            </div>
            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-1 norightpadding" })
            <div class="col-md-2">
                @Html.DropDownListFor(m => m.Status, new SelectList(ViewBag.Status, "Status", "Text"), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-3">
                @Html.LabelFor(model => model.Value, htmlAttributes: new { @class = "control-label col-md-3 noleftpadding" })
                <div class=" input-group col-md-6 nopadding">
                    <div class="col-md-12 nopadding">
                        @Html.EditorFor(model => model.Value, "{0:C0}", new { htmlAttributes = new { @class = "form-control" } })
                        @Html.EditorFor(model => model.Value, new { htmlAttributes = new { @class = "form-control" } })


                        @Html.ValidationMessageFor(model => model.Value, "", new { @class = "text-danger" })
                    </div>
                    </div>
                    </div>
                    </div>*@


        @*<div class="form-group">
                @Html.LabelFor(model => model.EndProduct, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.EditorFor(model => model.EndProduct, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EndProduct, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.Principal, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.EditorFor(model => model.Principal, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Principal, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-9"></div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Product, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3 ">
                    @Html.EditorFor(model => model.Product, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Product, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-2 norightpadding">
                    @Html.LabelFor(model => model.FollowUpDate, htmlAttributes: new { @class = "control-label col-md-3 noleftpadding" })
                    <div class=" input-group nopadding col-md-9">

                        <div>
                            <div class="input-group date" data-provide="datepicker">
                                @Html.EditorFor(model => model.FollowUpDate, new { htmlAttributes = new { @class = "form-control" } })
                                <div class="input-group-addon">
                                    <span class="glyphicon glyphicon-th"></span>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
                <div class="col-md-5 norightpadding">
                    <div class="form-group">
                        @Html.LabelFor(model => model.NextAction, htmlAttributes: new { @class = "control-label col-md-3 norightpadding" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.NextAction, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.NextAction, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-9"></div>
                    </div>
                </div>
            </div>*@








        <div class="form-group">
            <table>
                <tr style="border-bottom: 10px solid transparent;border-top: 10px solid transparent;">
                    <td>
                        @Html.LabelFor(model => model.Customer, htmlAttributes: new { @class = "control-label labelpadding" })
                    </td>
                    <td style="width:300px">
                        @Html.EditorFor(model => model.Customer, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Customer, "", new { @class = "text-danger" })
                    </td>
                    <td>
                        @Html.LabelFor(model => model.Principal, htmlAttributes: new { @class = "control-label col-md-2" })
                    </td>
                    <td style="width:300px">
                        @Html.EditorFor(model => model.Principal, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Principal, "", new { @class = "text-danger" })
                    </td>
                    @*<td>
                            @Html.LabelFor(model => model.EndProduct, htmlAttributes: new { @class = "control-label labelpadding" })
                        </td>
                        <td style="width:300px">
                            @Html.EditorFor(model => model.EndProduct, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.EndProduct, "", new { @class = "text-danger" })
                        </td>*@
                    <td>
                        @Html.LabelFor(model => model.Product, htmlAttributes: new { @class = "control-label labelpadding" })
                    </td>
                    <td>
                        @Html.EditorFor(model => model.Product, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Product, "", new { @class = "text-danger" })
                    </td>

                </tr>

                <tr style="border-bottom: 10px solid transparent;border-top: 10px solid transparent;">

                    <td>
                        @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label labelpadding" })
                    </td>
                    <td>
                        @Html.DropDownListFor(m => m.Status, new SelectList(ViewBag.Status, "Status", "Text"), new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                    </td>
                    <td>
                        @Html.LabelFor(model => model.Value, htmlAttributes: new { @class = "control-label labelpadding" })
                    </td>
                    <td>
                        @Html.EditorFor(model => model.Value, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Value, "", new { @class = "text-danger" })
                    </td>
                    <td>
                        @Html.LabelFor(model => model.FollowUpDate, htmlAttributes: new { @class = "control-label labelpadding" })
                    </td>
                    <td>
                        <div>
                            <div class="input-group date" data-provide="datepicker">
                                @Html.EditorFor(model => model.FollowUpDate, new { htmlAttributes = new { @class = "form-control" } })
                                <div class="input-group-addon">
                                    <span class="glyphicon glyphicon-th"></span>
                                </div>
                            </div>
                        </div>
                    </td>
                </tr>
                @*<tr>
                        <td>
                            @Html.LabelFor(model => model.NextAction, htmlAttributes: new { @class = "control-label labelpadding" })
                        </td>
                        <td>
                            @Html.EditorFor(model => model.NextAction, new { htmlAttributes = new { @class = "form-control w-100" } })
                            @Html.ValidationMessageFor(model => model.NextAction, "", new { @class = "text-danger" })
                        </td>
                    </tr>*@
            </table>
            @*<table>
                    <tr>
                        <td>
                            @Html.LabelFor(model => model.NextAction, htmlAttributes: new { @class = "control-label labelpadding" })
                        </td>
                        <td>
                            @Html.EditorFor(model => model.NextAction, new { htmlAttributes = new { @class = "form-control w-100"} })
                            @Html.ValidationMessageFor(model => model.NextAction, "", new { @class = "text-danger" })
                        </td>
                    </tr>
                </table>*@
        </div>




        <div class="form-group">
            @Html.LabelFor(model => model.NextAction, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-lg-9">
                @Html.EditorFor(model => model.NextAction, new { htmlAttributes = new { @class = "form-control", @style = "width: 100%; max-width: 100%;" } })
                @Html.ValidationMessageFor(model => model.NextAction, "", new { @class = "text-danger" })
            </div>
        </div>





        <div class="form-group">
            <div class="col-md-2">
                <div class="row">
                    @Html.LabelFor(model => model.ManagerComment, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="row right">
                    <input value="Meeting Scheduled" class="btn btn-link  nopadding fontsemilabel" onclick="location.href='@Url.Action("MeetingSch", "Strategy", new {id = Model.StrategyId})'" />
                </div>
                <div class="row right">
                    <input value="Need to schedule visit" class="btn btn-link nopadding fontsemilabel" onclick="location.href='@Url.Action("SchVisit", "Strategy", new {id = Model.StrategyId})'" />
                </div>
                <div class="row right">
                    <input value="Need to schedule eMeeting" class="btn btn-link nopadding fontsemilabel" onclick="location.href='@Url.Action("ScheMeet", "Strategy", new {id = Model.StrategyId})'" />
                </div>
                <div class="row right">
                    <input value="No action at this time, followup planned" class="btn btn-link nopadding fontsemilabel" onclick="location.href='@Url.Action("NoAct", "Strategy", new {id = Model.StrategyId})'" />
                </div>
                <div class="row right">
                    <input value="Samples Requested" class="btn btn-link nopadding fontsemilabel" onclick="location.href='@Url.Action("SampReq", "Strategy", new {id = Model.StrategyId})'" />
                </div>
                <div class="row right">
                    <input value="Evaluating Samples" class="btn btn-link nopadding fontsemilabel" onclick="location.href='@Url.Action("EvalSamp", "Strategy", new {id = Model.StrategyId})'" />
                </div>
                <div class="row right">
                    <input value="Need to Confirm CEM location" class="btn btn-link nopadding fontsemilabel" onclick="location.href='@Url.Action("ConfirmCEM", "Strategy", new {id = Model.StrategyId})'" />
                </div>
            </div>
            <div class="col-lg-9">
                @Html.TextAreaFor(m => m.ManagerComment, 100, 50, new { id = "questionInput", maxlength = 1000, style = "width: 100%; max-width: 100%" })
                <div id="charsLeft"></div>
                <div class="col-lg-3">
                    <p style="white-space: pre-line">
                        <input value="New Update" class="btn btn-default" onclick="location.href='@Url.Action("Update", "Strategy", new {id = Model.StrategyId})'" />
                    </p>
                </div>
            </div>
        </div>

        @*<div class="form-group col-lg-12">
                <div class="col-lg-3">
                    <input value="Meeting Scheduled" class="btn btn-default" onclick="location.href='@Url.Action("MeetingSch", "Strategy", new {id = Model.StrategyId})'" />
                </div>
                <div class="col-lg-3">
                    <input value="Need to schedule visit" class="btn btn-default" onclick="location.href='@Url.Action("SchVisit", "Strategy", new {id = Model.StrategyId})'" />
                </div>
                <div class="col-lg-3">
                    <input value="Need to schedule eMeeting" class="btn btn-default" onclick="location.href='@Url.Action("ScheMeet", "Strategy", new {id = Model.StrategyId})'" />
                </div>
                <div class="col-lg-3">
                    <input value="No action at this time, followup planned" class="btn btn-default" onclick="location.href='@Url.Action("NoAct", "Strategy", new {id = Model.StrategyId})'" />
                </div>
                <div class="col-lg-3">
                    <input value="Samples Requested" class="btn btn-default" onclick="location.href='@Url.Action("SampReq", "Strategy", new {id = Model.StrategyId})'" />
                </div>
                <div class="col-lg-3">
                    <input value="Evaluating Samples" class="btn btn-default" onclick="location.href='@Url.Action("EvalSamp", "Strategy", new {id = Model.StrategyId})'" />
                </div>
                <div class="col-lg-3">
                    <input value="Need to Confirm CEM location" class="btn btn-default" onclick="location.href='@Url.Action("ConfirmCEM", "Strategy", new {id = Model.StrategyId})'" />
                </div>
            </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.History, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-9">
                @Html.TextAreaFor(model => model.History, 100, 50, htmlAttributes: new { style = "width: 100%; max-width: 100%;" })
                @Html.ValidationMessageFor(model => model.History, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Group, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.Group, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Group, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-9"></div>
        </div>
    </div>
}

<a href="javascript:void(0);" onclick="history.go(-1);">Back</a>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
